{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "LocumTrueRate API",
		"description": "Complete API collection for LocumTrueRate - Locum Tenens Job Board Platform\n\nThis collection includes all 26 endpoints with:\n- Authentication flow with automatic token management\n- Jobs CRUD operations with advanced filtering\n- Applications system with search and status management\n- Calculator endpoints for contract and paycheck calculations\n- GDPR compliance endpoints for data export\n\n## Usage\n1. Import the LocumTrueRate Environment\n2. Run 'Auth - Login' first to get a token\n3. Token is automatically saved and used in subsequent requests\n4. All endpoints include response validation tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health & Info",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status ok\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('ok');",
									"});",
									"",
									"pm.test(\"Response has service name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.service).to.eql('locumtruerate-api');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Basic health check endpoint to verify API is running"
					}
				},
				{
					"name": "API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has endpoints list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('endpoints');",
									"    pm.expect(jsonData.endpoints).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}"
							]
						},
						"description": "Get API information and available endpoints"
					}
				}
			],
			"description": "Basic API health and information endpoints"
		},
		{
			"name": "2. Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 400 (if user exists)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Response has user data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('user');",
									"        pm.expect(jsonData.user).to.have.property('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"role\": \"locum\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    ",
									"    // Save token for future requests",
									"    pm.environment.set('authToken', jsonData.data.token);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"auth",
								"login"
							]
						},
						"description": "Login user and receive JWT token"
					}
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated user information"
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"auth",
								"logout"
							]
						},
						"description": "Logout user and invalidate token"
					}
				}
			],
			"description": "User authentication endpoints - register, login, logout, and profile access"
		},
		{
			"name": "3. Jobs",
			"item": [
				{
					"name": "List Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has jobs array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('jobs');",
									"    pm.expect(jsonData.data.jobs).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('pagination');",
									"    pm.expect(jsonData.data.pagination).to.have.property('currentPage');",
									"    pm.expect(jsonData.data.pagination).to.have.property('totalPages');",
									"});",
									"",
									"// Save first job ID for other tests",
									"var jsonData = pm.response.json();",
									"if (jsonData.data.jobs.length > 0) {",
									"    pm.environment.set('testJobId', jsonData.data.jobs[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/jobs?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get list of jobs with pagination"
					}
				},
				{
					"name": "List Jobs with Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has jobs array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('jobs');",
									"    pm.expect(jsonData.data.jobs).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/jobs?specialty=Emergency Medicine&state=CA&minRate=200&maxRate=500",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"jobs"
							],
							"query": [
								{
									"key": "specialty",
									"value": "Emergency Medicine"
								},
								{
									"key": "state",
									"value": "CA"
								},
								{
									"key": "minRate",
									"value": "200"
								},
								{
									"key": "maxRate",
									"value": "500"
								}
							]
						},
						"description": "Get filtered list of jobs by specialty, state, and rate range"
					}
				},
				{
					"name": "Get Job by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has job data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('job');",
									"    pm.expect(jsonData.data.job).to.have.property('id');",
									"    pm.expect(jsonData.data.job).to.have.property('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/jobs/{{testJobId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"jobs",
								"{{testJobId}}"
							]
						},
						"description": "Get single job by ID with full details"
					}
				},
				{
					"name": "Create Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has created job\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('job');",
									"    pm.expect(jsonData.data.job).to.have.property('id');",
									"    ",
									"    // Save created job ID",
									"    pm.environment.set('createdJobId', jsonData.data.job.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Emergency Medicine Physician\",\n  \"location\": \"San Francisco, CA\",\n  \"state\": \"CA\",\n  \"specialty\": \"Emergency Medicine\",\n  \"description\": \"Urgent need for experienced ER physician in busy urban hospital.\",\n  \"hourlyRateMin\": 250,\n  \"hourlyRateMax\": 300,\n  \"duration\": \"13 weeks\",\n  \"shiftType\": \"12-hour shifts\",\n  \"companyName\": \"SF General Hospital\",\n  \"requirements\": [\n    \"Board certified in Emergency Medicine\",\n    \"Valid CA medical license\",\n    \"ACLS certification\"\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/jobs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"jobs"
							]
						},
						"description": "Create a new job posting (requires authentication)"
					}
				},
				{
					"name": "Update Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated job\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('job');",
									"    pm.expect(jsonData.data.job).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Emergency Medicine Physician - Updated\",\n  \"hourlyRateMax\": 320\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/jobs/{{createdJobId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"jobs",
								"{{createdJobId}}"
							]
						},
						"description": "Update an existing job (requires authentication and ownership)"
					}
				}
			],
			"description": "Job management endpoints - list, view, create, and update job postings"
		},
		{
			"name": "4. Applications",
			"item": [
				{
					"name": "Apply to Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 400 (if already applied)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"Response has application data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('data');",
									"        pm.expect(jsonData.data).to.have.property('application');",
									"        pm.expect(jsonData.data.application).to.have.property('id');",
									"        ",
									"        // Save application ID",
									"        pm.environment.set('testApplicationId', jsonData.data.application.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": {{testJobId}},\n  \"coverLetter\": \"I am very interested in this position and have extensive experience in emergency medicine. I am available for the full 13-week assignment and can start immediately.\",\n  \"expectedRate\": 275,\n  \"availableDate\": \"2025-08-01\",\n  \"notes\": \"Flexible with scheduling requirements\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/applications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"applications"
							]
						},
						"description": "Apply to a job posting"
					}
				},
				{
					"name": "Get My Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has applications array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('applications');",
									"    pm.expect(jsonData.data.applications).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/applications/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"applications",
								"my"
							]
						},
						"description": "Get current user's job applications"
					}
				},
				{
					"name": "Search Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has search results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('applications');",
									"    pm.expect(jsonData.data.applications).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/applications/search?search=emergency&status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"applications",
								"search"
							],
							"query": [
								{
									"key": "search",
									"value": "emergency"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						},
						"description": "Search user's applications with filters"
					}
				},
				{
					"name": "Get Filter Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has filter options\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('specialties');",
									"    pm.expect(jsonData.data).to.have.property('states');",
									"    pm.expect(jsonData.data).to.have.property('statuses');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/applications/filter-options",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"applications",
								"filter-options"
							]
						},
						"description": "Get available filter options for applications"
					}
				}
			],
			"description": "Application management endpoints - apply, view, search, and manage job applications"
		},
		{
			"name": "5. Calculators",
			"item": [
				{
					"name": "Contract Calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has calculation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('gross');",
									"    pm.expect(jsonData.data).to.have.property('taxes');",
									"    pm.expect(jsonData.data).to.have.property('net');",
									"});",
									"",
									"pm.test(\"Calculation results are numbers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.gross.annual).to.be.a('number');",
									"    pm.expect(jsonData.data.net.annual).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hourlyRate\": 200,\n  \"hoursPerWeek\": 40,\n  \"weeksPerYear\": 48,\n  \"state\": \"CA\",\n  \"expenseRate\": 0.15\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/calculate/contract",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"calculate",
								"contract"
							]
						},
						"description": "Calculate contract earnings with taxes and expenses"
					}
				},
				{
					"name": "Paycheck Calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has paycheck data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('earnings');",
									"    pm.expect(jsonData.data).to.have.property('deductions');",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"regularHours\": 40,\n  \"regularRate\": 200,\n  \"overtimeHours\": 5,\n  \"overtimeRate\": 300,\n  \"housingStipend\": 2000,\n  \"mealStipend\": 500,\n  \"state\": \"CA\",\n  \"period\": \"weekly\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/calculate/paycheck",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"calculate",
								"paycheck"
							]
						},
						"description": "Calculate comprehensive paycheck with all deductions"
					}
				},
				{
					"name": "Simple Paycheck Calculator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has calculation data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('grossPay');",
									"    pm.expect(jsonData.data).to.have.property('netPay');",
									"    pm.expect(jsonData.data).to.have.property('deductions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"grossPay\": 8000,\n  \"additionalDeductions\": 500,\n  \"state\": \"TX\",\n  \"period\": \"weekly\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/calculate/simple-paycheck",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"calculate",
								"simple-paycheck"
							]
						},
						"description": "Calculate basic paycheck with simple inputs"
					}
				},
				{
					"name": "Get Tax Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tax information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('federalTaxBrackets');",
									"    pm.expect(jsonData.data).to.have.property('ficaRates');",
									"    pm.expect(jsonData.data).to.have.property('stateTaxRates');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/calculate/tax-info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"calculate",
								"tax-info"
							]
						},
						"description": "Get current tax brackets and rates information"
					}
				},
				{
					"name": "Get States List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has states list\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('states');",
									"    pm.expect(jsonData.data.states).to.be.an('array');",
									"    pm.expect(jsonData.data.states.length).to.equal(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/calculate/states",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"calculate",
								"states"
							]
						},
						"description": "Get list of all 50 states with tax rates"
					}
				}
			],
			"description": "Calculator endpoints for contract and paycheck calculations with tax information"
		},
		{
			"name": "6. GDPR Data Export",
			"item": [
				{
					"name": "Export My Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has export data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('exportData');",
									"    pm.expect(jsonData.data).to.have.property('format');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/data-export/my-data?format=json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"data-export",
								"my-data"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						},
						"description": "Export all user data in JSON or CSV format (GDPR compliance)"
					}
				},
				{
					"name": "Privacy Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has privacy information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('dataSummary');",
									"    pm.expect(jsonData.data).to.have.property('userRights');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/data-export/privacy-summary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"data-export",
								"privacy-summary"
							]
						},
						"description": "Get privacy compliance summary and user rights information"
					}
				},
				{
					"name": "Request Deletion Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has deletion information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('process');",
									"    pm.expect(jsonData.data).to.have.property('timeline');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/data-export/request-deletion",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"data-export",
								"request-deletion"
							]
						},
						"description": "Get information about data deletion process and timeline"
					}
				}
			],
			"description": "GDPR compliance endpoints for data export and privacy rights"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4000"
		},
		{
			"key": "apiVersion",
			"value": "v1"
		}
	]
}