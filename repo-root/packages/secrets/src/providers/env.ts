/**
 * Environment Variables Secret Provider
 * Simple provider that reads secrets from environment variables
 */

import * as dotenv from 'dotenv';
import * as dotenvExpand from 'dotenv-expand';
import * as fs from 'fs';
import * as path from 'path';
import type { SecretProvider } from '../types';

export class EnvSecretsProvider implements SecretProvider {
  private prefix: string;
  private loaded = false;

  constructor(options?: {
    prefix?: string;
    envFile?: string;
    expandVariables?: boolean;
  }) {
    this.prefix = options?.prefix || '';
    
    // Load environment files
    if (options?.envFile) {
      this.loadEnvFile(options.envFile, options.expandVariables);
    } else {
      // Load default env files
      this.loadDefaultEnvFiles(options?.expandVariables);
    }
  }

  /**
   * Get secret from environment
   */
  async get(name: string): Promise<string | null> {
    const envKey = this.getEnvKey(name);
    return process.env[envKey] || null;
  }

  /**
   * Set secret in environment (runtime only)
   */
  async set(name: string, value: string): Promise<void> {
    const envKey = this.getEnvKey(name);
    process.env[envKey] = value;
  }

  /**
   * Delete secret from environment
   */
  async delete(name: string): Promise<void> {
    const envKey = this.getEnvKey(name);
    delete process.env[envKey];
  }

  /**
   * List all secrets with prefix
   */
  async list(prefix?: string): Promise<string[]> {
    const searchPrefix = this.prefix + (prefix || '');
    return Object.keys(process.env)
      .filter(key => key.startsWith(searchPrefix))
      .map(key => key.substring(this.prefix.length));
  }

  /**
   * Check if secret exists
   */
  async exists(name: string): Promise<boolean> {
    const envKey = this.getEnvKey(name);
    return envKey in process.env;
  }

  /**
   * Get environment key with prefix
   */
  private getEnvKey(name: string): string {
    return this.prefix + name;
  }

  /**
   * Load environment file
   */
  private loadEnvFile(filePath: string, expand?: boolean): void {
    if (!fs.existsSync(filePath)) {
      console.warn(`Environment file not found: ${filePath}`);
      return;
    }

    const result = dotenv.config({ path: filePath });
    
    if (result.error) {
      console.error(`Error loading env file ${filePath}:`, result.error);
      return;
    }

    if (expand && result.parsed) {
      dotenvExpand.expand({ parsed: result.parsed });
    }

    console.log(`✅ Loaded environment from: ${filePath}`);
  }

  /**
   * Load default environment files based on NODE_ENV
   */
  private loadDefaultEnvFiles(expand?: boolean): void {
    const env = process.env.NODE_ENV || 'development';
    const cwd = process.cwd();

    // Load files in order of precedence
    const envFiles = [
      `.env.${env}.local`,
      `.env.local`,
      `.env.${env}`,
      '.env'
    ];

    for (const file of envFiles) {
      const filePath = path.join(cwd, file);
      if (fs.existsSync(filePath)) {
        this.loadEnvFile(filePath, expand);
      }
    }

    this.loaded = true;
  }

  /**
   * Validate all required environment variables
   */
  validateRequired(required: string[]): { valid: boolean; missing: string[] } {
    const missing: string[] = [];

    for (const name of required) {
      const envKey = this.getEnvKey(name);
      if (!process.env[envKey]) {
        missing.push(name);
      }
    }

    return {
      valid: missing.length === 0,
      missing
    };
  }

  /**
   * Export current environment to .env format
   */
  exportToEnvFile(filePath: string, secrets: string[]): void {
    const lines: string[] = ['# Generated by LocumTrueRate Secrets Manager'];
    lines.push(`# Generated at: ${new Date().toISOString()}`);
    lines.push('');

    for (const name of secrets) {
      const value = process.env[this.getEnvKey(name)];
      if (value !== undefined) {
        // Escape special characters
        const escapedValue = value.includes(' ') || value.includes('#') 
          ? `"${value.replace(/"/g, '\\"')}"` 
          : value;
        lines.push(`${name}=${escapedValue}`);
      }
    }

    fs.writeFileSync(filePath, lines.join('\n'));
    console.log(`✅ Exported ${secrets.length} secrets to: ${filePath}`);
  }

  /**
   * Get all secrets as object
   */
  async getAll(): Promise<Record<string, string>> {
    const secrets: Record<string, string> = {};
    
    for (const key of Object.keys(process.env)) {
      if (key.startsWith(this.prefix)) {
        const name = key.substring(this.prefix.length);
        secrets[name] = process.env[key] || '';
      }
    }

    return secrets;
  }

  /**
   * Create example .env file
   */
  static createExampleEnvFile(filePath: string = '.env.example'): void {
    const example = `# LocumTrueRate Environment Configuration Example
# Copy this file to .env and fill in your values

# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/locumtruerate
DB_HOST=localhost
DB_PORT=5432
DB_NAME=locumtruerate
DB_USER=postgres
DB_PASSWORD=your_password_here
DB_SSL=false

# Cloudflare R2 Storage
R2_ACCOUNT_ID=your_account_id
R2_ACCESS_KEY_ID=your_access_key
R2_SECRET_ACCESS_KEY=your_secret_key
R2_BUCKET=locumtruerate-uploads

# Clerk Authentication
CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
CLERK_WEBHOOK_SECRET=whsec_...
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...

# Stripe Payments
STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...

# Email (SendGrid)
SENDGRID_API_KEY=SG.xxx...
EMAIL_FROM=noreply@locumtruerate.com
EMAIL_FROM_NAME=LocumTrueRate
EMAIL_REPLY_TO=support@locumtruerate.com

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_min_64_chars
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your_refresh_token_secret
JWT_REFRESH_EXPIRES_IN=30d

# Encryption Keys
ENCRYPTION_MASTER_KEY=your_32_byte_base64_encoded_key
ENCRYPTION_DATA_KEY=optional_data_specific_key
ENCRYPTION_BACKUP_KEY=optional_backup_key

# Sentry Error Tracking
SENTRY_DSN=https://xxx@xxx.ingest.sentry.io/xxx
SENTRY_ENVIRONMENT=development

# Analytics (Optional)
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
MIXPANEL_TOKEN=your_mixpanel_token
AMPLITUDE_API_KEY=your_amplitude_key

# API Configuration
API_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000
INTERNAL_API_KEY=your_internal_api_key

# Feature Flags
ENABLE_ANALYTICS=true
ENABLE_SENTRY=true
ENABLE_EMAIL_NOTIFICATIONS=true
ENABLE_WEBHOOKS=true

# Development Only
NODE_ENV=development
LOG_LEVEL=debug
`;

    fs.writeFileSync(filePath, example);
    console.log(`✅ Created example environment file: ${filePath}`);
  }
}