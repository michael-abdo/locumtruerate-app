generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  passwordHash          String?
  role                  UserRole             @default(EMPLOYER)
  companyName           String?
  contactName           String
  phoneNumber           String?
  avatarUrl             String?
  bio                   String?
  emailVerified         DateTime?
  lastLoginAt           DateTime?
  failedLoginAttempts   Int                  @default(0)
  lockedUntil           DateTime?
  subscriptionTier      SubscriptionTier     @default(FREE)
  subscriptionStatus    String?
  stripeCustomerId      String?              @unique
  subscriptionStartDate DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  deletedAt             DateTime?
  legacyId              String?              @unique
  activities            ActivityLog[]
  analyticsEvents       AnalyticsEvent[]
  apiKeys               ApiKey[]
  applications          Application[]
  comments              ApplicationComment[]
  companies             Company[]
  featureUsage          FeatureUsage[]
  jobs                  Job[]
  knowledgeAuthored     KnowledgeArticle[]   @relation("KnowledgeAuthor")
  knowledgeReviewed     KnowledgeArticle[]   @relation("KnowledgeReviewer")
  knowledgeSearches     KnowledgeSearch[]
  leadPurchases         LeadPurchase[]       @relation("LeadPurchases")
  notifications         Notification[]
  organizationMembers   OrganizationMember[]
  savedCalculations     SavedCalculation[]
  sessions              Session[]
  supportFeedback       SupportFeedback[]
  supportMessages       SupportMessage[]
  supportTickets        SupportTicket[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  permissions String[]
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  revokedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
}

model Organization {
  id                     String               @id @default(cuid())
  name                   String
  slug                   String               @unique
  description            String?
  logo                   String?
  website                String?
  allowPublicProfiles    Boolean              @default(true)
  autoApproveJobs        Boolean              @default(false)
  maxJobPostings         Int                  @default(10)
  maxTeamMembers         Int                  @default(5)
  subscriptionTier       SubscriptionTier     @default(FREE)
  subscriptionValidUntil DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
  legacyId               String?              @unique
  companies              Company[]
  members                OrganizationMember[]
  subscription           Subscription?

  @@index([slug])
  @@index([createdAt])
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  permissions    String[]
  invitedAt      DateTime         @default(now())
  invitedBy      String
  joinedAt       DateTime?
  legacyId       String?          @unique
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model Company {
  id             String        @id @default(cuid())
  organizationId String?
  ownerId        String
  name           String
  slug           String        @unique
  description    String?
  logo           String?
  website        String?
  industry       String?
  size           String?
  foundedYear    Int?
  location       String?
  benefits       String[]
  culture        String?
  techStack      String[]
  socialLinks    Json?
  mediaGallery   String[]
  isPublic       Boolean       @default(true)
  isVerified     Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  legacyId       String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  owner          User          @relation(fields: [ownerId], references: [id])
  jobs           Job[]

  @@index([slug])
  @@index([organizationId])
  @@index([ownerId])
  @@index([isPublic])
}

model Job {
  id               String        @id @default(cuid())
  companyId        String
  userId           String
  title            String
  slug             String        @unique
  location         String
  description      String
  requirements     String?
  responsibilities String?
  benefits         String?
  salary           String?
  type             JobType?
  category         JobCategory?
  tags             String[]
  status           JobStatus     @default(DRAFT)
  publishedAt      DateTime?
  expiresAt        DateTime
  viewCount        Int           @default(0)
  applicationCount Int           @default(0)
  autoRenew        Boolean       @default(false)
  renewalDays      Int           @default(30)
  maxRenewals      Int           @default(3)
  renewalCount     Int           @default(0)
  metaTitle        String?
  metaDescription  String?
  lastViewedAt     DateTime?
  isBoosted        Boolean       @default(false)
  boostType        String?
  boostExpiresAt   DateTime?
  boostPaymentId   String?
  boostActivatedAt DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  legacyId         String?       @unique
  activities       ActivityLog[]
  applications     Application[]
  company          Company       @relation(fields: [companyId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  jobViews         JobView[]

  @@index([slug])
  @@index([companyId])
  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([type])
  @@index([expiresAt])
  @@index([createdAt])
}

model JobView {
  id        String   @id @default(cuid())
  jobId     String
  viewerId  String?
  ipAddress String
  userAgent String?
  referrer  String?
  sessionId String?
  viewedAt  DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([viewedAt])
}

model Application {
  id              String               @id @default(cuid())
  jobId           String
  userId          String?
  name            String
  email           String
  phone           String
  experience      Int
  currentCompany  String?
  currentRole     String?
  expectedSalary  String?
  noticePeriod    String?
  resumeUrl       String?
  coverLetter     String
  portfolioUrl    String?
  linkedinUrl     String?
  additionalInfo  String?
  score           Float?
  scoreBreakdown  Json?
  matchPercentage Float?
  status          ApplicationStatus    @default(PENDING)
  reviewedAt      DateTime?
  reviewedBy      String?
  appliedAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  ipAddress       String?
  legacyId        String?              @unique
  activities      ActivityLog[]
  job             Job                  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user            User?                @relation(fields: [userId], references: [id])
  comments        ApplicationComment[]

  @@index([jobId])
  @@index([userId])
  @@index([status])
  @@index([score])
  @@index([appliedAt])
}

model ApplicationComment {
  id            String      @id @default(cuid())
  applicationId String
  userId        String
  comment       String
  isInternal    Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  legacyId      String?     @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model ActivityLog {
  id             String      @id @default(cuid())
  organizationId String?
  userId         String
  action         String
  entityType     String
  entityId       String
  details        Json?
  ipAddress      String?
  userAgent      String?
  timestamp      DateTime    @default(now())
  legacyId       String?     @unique
  job            Application @relation(fields: [entityId], references: [id], map: "ActivityLog_job_fkey")
  job            Job         @relation(fields: [entityId], references: [id], map: "ActivityLog_job_fkey")
  user           User        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  readAt    DateTime?
  createdAt DateTime  @default(now())
  legacyId  String?   @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([readAt])
  @@index([createdAt])
}

model Subscription {
  id                   String           @id @default(cuid())
  organizationId       String           @unique
  tier                 SubscriptionTier
  status               String
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  stripePriceId        String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAt             DateTime?
  cancelledAt          DateTime?
  jobPostingsUsed      Int              @default(0)
  teamMembersUsed      Int              @default(0)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  payments             Payment[]
  organization         Organization     @relation(fields: [organizationId], references: [id])

  @@index([stripeCustomerId])
  @@index([status])
}

model Payment {
  id                    String        @id @default(cuid())
  subscriptionId        String
  amount                Int
  currency              String        @default("usd")
  status                PaymentStatus
  stripePaymentIntentId String?       @unique
  stripeInvoiceId       String?
  description           String?
  failureReason         String?
  paidAt                DateTime?
  createdAt             DateTime      @default(now())
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([status])
  @@index([createdAt])
}

model FeatureUsage {
  id                 String   @id @default(cuid())
  userId             String
  feature            String
  amount             Int      @default(0)
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feature, billingPeriodStart, billingPeriodEnd])
  @@index([userId])
  @@index([feature])
  @@index([billingPeriodStart])
  @@index([billingPeriodEnd])
  @@index([createdAt])
}

model EmailLog {
  id                String    @id @default(cuid())
  to                String
  from              String
  subject           String
  template          String
  sendgridMessageId String?
  status            String
  sentAt            DateTime  @default(now())
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  bouncedAt         DateTime?
  failedAt          DateTime?
  error             String?

  @@index([to])
  @@index([status])
  @@index([sentAt])
}

model Lead {
  id          String         @id @default(cuid())
  source      String
  sourceId    String?
  email       String
  name        String?
  company     String?
  phone       String?
  message     String?
  score       Int            @default(0)
  status      String         @default("new")
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  convertedAt DateTime?
  listing     LeadListing?
  purchases   LeadPurchase[]

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model Analytics {
  id          String   @id @default(cuid())
  eventType   String
  eventName   String
  entityType  String?
  entityId    String?
  userId      String?
  sessionId   String
  ipAddress   String?
  userAgent   String?
  page        String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  properties  Json?
  timestamp   DateTime @default(now())
  loadTime    Int?
  ttfb        Int?

  @@index([eventType])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String
  event      String
  properties Json?
  page       String?
  referrer   String?
  userAgent  String?
  ip         String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([event])
  @@index([createdAt])
  @@index([page])
}

model SupportTicket {
  id            String            @id @default(cuid())
  ticketNumber  String            @unique
  userId        String
  email         String
  name          String
  subject       String
  description   String
  category      TicketCategory
  priority      TicketPriority
  status        TicketStatus      @default(OPEN)
  assignedTo    String?
  tags          String[]          @default([])
  attachments   String[]          @default([])
  metadata      Json?
  internalNotes String?
  resolution    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  resolvedAt    DateTime?
  closedAt      DateTime?
  feedback      SupportFeedback[]
  messages      SupportMessage[]
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([assignedTo])
  @@index([createdAt])
  @@index([ticketNumber])
}

model SupportMessage {
  id          String        @id @default(cuid())
  ticketId    String
  authorId    String
  authorType  String
  message     String
  attachments String[]      @default([])
  isInternal  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  author      User          @relation(fields: [authorId], references: [id])
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
  @@index([createdAt])
}

model KnowledgeArticle {
  id                String    @id @default(cuid())
  title             String
  content           String
  category          String
  tags              String[]  @default([])
  difficulty        String    @default("beginner")
  estimatedReadTime Int       @default(5)
  helpful           Int       @default(0)
  notHelpful        Int       @default(0)
  views             Int       @default(0)
  published         Boolean   @default(false)
  authorId          String?
  reviewerId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  publishedAt       DateTime?
  author            User?     @relation("KnowledgeAuthor", fields: [authorId], references: [id])
  reviewer          User?     @relation("KnowledgeReviewer", fields: [reviewerId], references: [id])

  @@index([category])
  @@index([published])
  @@index([views])
  @@index([helpful])
  @@index([tags])
  @@index([title])
  @@index([content])
}

model KnowledgeSearch {
  id           String   @id @default(cuid())
  query        String
  category     String?
  tags         String[] @default([])
  resultsCount Int      @default(0)
  userId       String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@index([query])
  @@index([category])
  @@index([userId])
  @@index([createdAt])
}

model SupportFeedback {
  id        String        @id @default(cuid())
  ticketId  String
  userId    String
  rating    Int
  feedback  String?
  category  String?
  createdAt DateTime      @default(now())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
}

model SavedCalculation {
  id            String    @id @default(cuid())
  userId        String
  type          String
  input         Json
  result        Json
  name          String?
  tags          String[]  @default([])
  isFavorite    Boolean   @default(false)
  isPublic      Boolean   @default(false)
  shareableLink String?   @unique
  expiresAt     DateTime?
  metadata      Json?
  timestamp     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isFavorite])
  @@index([isPublic])
  @@index([timestamp])
  @@index([tags])
}

model LeadPurchase {
  id               String    @id @default(cuid())
  leadId           String
  buyerId          String
  price            Int
  stripePaymentId  String?
  paymentStatus    String    @default("pending")
  accessGranted    Boolean   @default(false)
  accessGrantedAt  DateTime?
  leadSource       String?
  leadScore        Int?
  purchaseMetadata Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  buyer            User      @relation("LeadPurchases", fields: [buyerId], references: [id], onDelete: Cascade)
  lead             Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@unique([leadId, buyerId])
  @@index([buyerId])
  @@index([leadId])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([leadSource])
}

model LeadListing {
  id               String    @id @default(cuid())
  leadId           String    @unique
  basePrice        Int
  currentPrice     Int
  priceCategory    String
  isAvailable      Boolean   @default(true)
  maxPurchases     Int       @default(1)
  currentPurchases Int       @default(0)
  industry         String?
  location         String?
  experience       String?
  previewData      Json?
  leadScore        Int       @default(0)
  calculatorData   Json?
  engagementLevel  String    @default("medium")
  listedAt         DateTime  @default(now())
  expiresAt        DateTime?
  lead             Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([isAvailable])
  @@index([priceCategory])
  @@index([leadScore])
  @@index([listedAt])
  @@index([industry])
  @@index([location])
}

enum UserRole {
  ADMIN
  EMPLOYER
  CANDIDATE
  SYSTEM
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  EXPIRED
  CLOSED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum JobCategory {
  ENGINEERING
  DESIGN
  MARKETING
  SALES
  PRODUCT
  FINANCE
  HR
  OPERATIONS
  OTHER
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  BILLING
  TECHNICAL
  ACCOUNT
  JOB_POSTING
  APPLICATION
  PAYMENT
  FEATURE_REQUEST
  BUG_REPORT
  OTHER
}
